{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"oNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACXC,mBAAS,cADE,mBACxCC,EADwC,KAC5BC,EAD4B,KAmB5C,OAEI,uBAAMC,SAbO,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAOd,UACA,6BAAKD,IACD,uBACIQ,KAAK,OACLC,MAAOT,EACPU,SAvBY,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,cA6B3BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCCpCrBC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGZC,EAHY,iDAGoCC,UAAUH,GAH9C,+DAICI,MAAOF,GAJR,cAIZG,EAJY,gBAKGA,EAAKC,OALR,uBAKXC,EALW,EAKXA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAG1Ca,QAAQC,IAAIR,GAdM,kBAeXA,GAfW,4CAAH,sDCANS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIpC,OACI,sBAAKgB,UAAU,yCAAf,UACG,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,8BAAIA,EAAJ,WCHES,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEblB,mBAAS,CAClCyB,KAAM,GACNe,SAAS,IAJ6B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAsBvC,OAfAC,qBAAU,WACT1B,EAAOC,GACN0B,MAAK,SAAAC,GAEEC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEf,UAER,CAACtB,IAIGuB,EDjByBM,CAAa7B,GAAhCa,EAFuB,EAE5BN,KAAae,EAFe,EAEfA,QAepB,OACI,cADK,CACL,sBACI,6BAAKtB,IAEFsB,GAAW,mBAAGJ,UAAU,mCAAb,qBACN,qBAAKA,UAAU,YAAf,SAEAL,EAAOJ,KAAK,SAAAC,GAAG,OACX,aADgB,CACf,EAAD,eAEQA,GADCA,EAAIC,aEctBmB,EAvCa,WAAM,MAEEhD,mBAAS,CAAC,gBAFZ,mBAE3BQ,EAF2B,KAEfT,EAFe,KAO9B,OACI,qCACC,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGG,6BAKQS,EAAWmB,KAAI,SAAAT,GAAQ,OAElB,cAAC,EAAD,CAEGA,SAAUA,GADHA,Y,MCtBnC+B,IAASC,OACJ,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b52abe06.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\nconst  [inputValue, setinputValue] = useState('Hola Mundo')\r\n\r\nconst RespuestainputValue = (e) => {\r\n    setinputValue(e.target.value);\r\n       // console.log(e.target.value);\r\n}\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();//para evitar el refresh completo de la pagina\r\n    //console.log('Submit hecho')\r\n\r\n    if (inputValue.trim().length > 2){ //trim es para eliminar los espacios en blanco y nulos como en oracle\r\n        setCategories(categories => [inputValue, ...categories]);\r\n        setinputValue('');\r\n    }\r\n    \r\n}\r\n\r\n    return (\r\n    \r\n        <form onSubmit={handleSubmit}>\r\n        <h1>{inputValue}</h1>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = {RespuestainputValue}\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGif = async (category)=> {\r\n\r\n    //const url = 'https://api.giphy.com/v1/gifs/search?q=Rick and Morty&limit=10&api_key=sEoYy7HUDlwl1pQTTkJyeGgXtIdFBSvY';\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=sEoYy7HUDlwl1pQTTkJyeGgXtIdFBSvY`;\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //el ? es para indicar que si trae imagenes las utilice.\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n//console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n           <img src={url} alt={title} />\r\n           <p>{title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGif } from '../helpers/GetGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    //console.log(data);\r\n    //console.log(loading);\r\n\r\n    /*const [images, setImages] = useState([])\r\n\r\n    useEffect( ()=> {\r\n         getGif(category)\r\n        .then(setImages)\r\n    },[category])*/\r\n\r\n   //&& forma corta de operador alternario, si loading es true(&&) entonces <p>Loaging</p>} \r\n\r\n  \r\n    return ( //utilizando GifGridItem.js, <></> es el fragmen, sirve para agrupar los objetos y asi el return no envia error\r\n        <> \r\n            <h3>{category}</h3>\r\n          \r\n              {loading && <p className=\"animate__animated animate__flash\" >Loading</p>} \r\n                    <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (// el map con parentesis en lugar de las llaves tienen un return implicito\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img} // los ... es para enviar las propiedades de la imagen independientes\r\n                        />\r\n                    ))\r\n                }\r\n                </div>\r\n              \r\n       </>\r\n    )\r\n\r\n\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from '../helpers/GetGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n   const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n   });\r\n\r\n   useEffect(() => {\r\n    getGif(category)\r\n    .then(imgs => {\r\n\r\n            setTimeout(() =>{\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n            },3000);\r\n        })\r\n    },[category])\r\n\r\n\r\n  \r\n   return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n//const categories = ['One Punch ',' Samurai X ',' Dragon Ball '];\r\nconst [categories, setCategories] = useState([' Samurai X ']);\r\n\r\n        //const handleAdd = () => {\r\n        //    setCategories([...categories,'Hunter']);\r\n        //}\r\n    return(\r\n        <>\r\n         <h1> GifExpertApp </h1>\r\n         <AddCategory setCategories={setCategories} />\r\n         <hr />\r\n\r\n         \r\n            <ol>\r\n                {\r\n                   /* categories.map(category => {\r\n                        return <li key={category} > {category} </li> primer ejercicio hasta AddCategory\r\n                    })*/\r\n                    categories.map(category => (\r\n                       \r\n                         <GifGrid \r\n                            key = {category}\r\n                            category={category} \r\n                         />\r\n                    ))\r\n                }\r\n                \r\n            </ol>\r\n\r\n           \r\n        </>\r\n    );\r\n    \r\n\r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n     <GifExpertApp />,\n   document.getElementById('root')\n);\n\n"],"sourceRoot":""}